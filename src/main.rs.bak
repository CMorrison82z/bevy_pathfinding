use paths::{pair_f32::*, pair_i32::*, pair_usize::*, *};

use std::{collections::HashMap, ops::Range};

use bevy_math::*;
use itertools::*;
use ndarray::*;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let array: Array2<u8> = Array2::from_shape_fn((5, 5), |(i, j)| {
        if i == 2 && j == 2 {
            0
        } else {
            1
        }
    });

    let t_index = (1, 2);

    let v_field = paths::vector_field(&array, &(2, 2));

    // Print the array
    println!("{:?}", array);
    println!("{:?}", array[t_index]);

    let root = BitMapBackend::new("vector_field.png", (640, 480)).into_drawing_area();
    root.fill(&WHITE)?;

    let mut chart = ChartBuilder::on(&root)
        .caption("Vector Field", ("sans-serif", 50).into_font())
        .build_cartesian_2d(-5f32..5f32, -5f32..5f32)?;

    chart.configure_mesh().draw()?;

    for ((x, y), vec) in v_field.indexed_iter() {
        let base_point = (x as f32, y as f32);
        let end_point = (base_point.0 + 0.25 * vec.x, base_point.1 + 0.25 * vec.y);

        // Plot each vector as a line
        chart
            .draw_series(LineSeries::new(vec![base_point, end_point], &RED))?
            .label(format!("({},{})", x, y))
            .legend(|(x, y)| PathElement::new(vec![(x, y), (x + 20, y)], &RED));
    }
    chart.configure_series_labels().draw()?;

    Ok(())
}
